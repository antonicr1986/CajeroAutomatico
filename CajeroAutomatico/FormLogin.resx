<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAFUAAAD/AAAA/QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAA/wAAAFUAAAAAAAAAAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAfwAAAP8DBgD7BgwA/wULAP8FCwD/BQwA/wUL
        AP8FCwD/BQsA/wULAP8FCwD/BQsA/wULAP8FCwD/BQwA/wULAP8FCwD/BgwA/wMGAPsAAAD/AAAAfwAA
        AAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAACBQB/AAAA/yVSAPtOrQD/SJ4A/0mh
        AP9JoQD/SaAA/0qjAP9KpAD/SqQA/0qkAP9KpAD/SqMA/0mgAP9JoQD/SaEA/0ieAP9OrQD/JVIA+wAA
        AP8CBQB/AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAMGAH8AAAD/KFkA+1W8
        AP9OrAD/T68A/0+vAP9RsgD/TKcA/0qjAP9KpAD/SqQA/0qjAP9MpwD/UbIA/0+vAP9PrwD/TqwA/1W8
        AP8oWQD7AAAA/wMGAH8AAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAwYAfwAA
        AP8nVwD7U7gA/0yoAP9MqAD/UbMA/zZ3AP8DBwD/BQoA/wQHAP8EBwD/BQoA/wMHAP82dwD/UbMA/0yo
        AP9MqAD/U7gA/ydXAPsAAAD/AwYAfwAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAA
        AAADBgB/AAAA/yhXAPtUuQD/TKgA/06rAP9XwAD/I00A/wAAAP8DCgL/AwsE/wMLBP8DCgL/AAAA/yNN
        AP9XwAD/TqsA/0yoAP9UuQD/KFcA+wAAAP8DBgB/AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AP8AAAD/AQEB/xAPDv+BfXf/gX14/wgICP8AAAD/AAAA/wkICP+Cfnj/gn54/w8ODv8GBgX/CgoJ/wkH
        Cf8IBgn/CQcJ/wkJCf8JBwj/CAUI/wgGCP8IBgj/CAYI/wgGCP8IBgj/CAYI/wgFCP8JBwj/CQkJ/wkH
        Cf8IBgn/CQcJ/woKCf8GBgX/Dw4O/4J+eP+Cfnj/CQgI/wAAAP8AAAD/CQkI/397dv+JhX//f3t1/357
        df9+enX/fnt1/397df9+e3X/fnp1/357df9+e3X/fnt1/357df9+e3X/fnt1/357df9+e3X/fnt1/357
        df9+enX/fnt1/397df9+e3X/fnp1/357df9/e3X/iYV//397dv8JCQj/AAAA/wAAAP8JCQn/gn54/42J
        g/+MiIL/jYmC/42Jgv+NiYL/jYmC/42Jgv+NiYL/jYmC/42Jgv+NiYL/jYmC/42Jgv+NiYL/jYmC/42J
        gv+NiYL/jYmC/42Jgv+NiYL/jYmC/42Jgv+NiYL/jYmC/4yIgv+NiYP/gn54/wkJCf8AAAD/AAAA/gkI
        CP93dG7/gn54/356df9/e3X/f3t1/397df9/e3X/f3t1/397df9/e3X/f3t1/397df9/e3X/f3t1/397
        df9/e3X/f3t1/397df9/e3X/f3t1/397df9/e3X/f3t1/397df9/e3X/fnp1/4J+eP93dG7/CQgI/wAA
        AP4AAAD/AQEB/wkICP8JCQn/CQkI/wkJCP8JCQj/CQkI/wkJCP8JCQj/CQkI/wkJCP8JCQj/CQkI/wkJ
        CP8JCQj/CQkI/wkJCP8JCQj/CQkI/wkJCP8JCQj/CQkI/wkJCP8JCQj/CQkI/wkJCP8JCQj/CQkJ/wkI
        CP8BAQH/AAAA/wAAANUAAAD/AAAA/gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/gAAAP8AAADV6AAAF+gAABfoAAAX6AAAF+gAABfoAAAX6AAAF+gAABfoAAAX6AAAF+gA
        ABfoAAAX6AAAF+gAABfoAAAX6AAAF+gAABfoAAAXCAAAEEgAABIIAAAQAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>